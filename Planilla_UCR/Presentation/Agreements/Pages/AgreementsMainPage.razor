@page "/Agreements/{employerEmail}/{projectName}/"

@using Application.Agreements
@using Application.People
@using Domain.Agreements.Entities
@using Domain.People.Entities
@using Application.Employees
@using Application.ContextMenu
@using Presentation.Employers.Models

@inject NavigationManager nav
@inject IEmployeeService PersonService
@inject IContextMenuService ContextMenuService
@inject IAgreementService AgreementService


@if(_loading) {
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
         </MudText>
       
    </MudPaper>
}else{
        List<BreadcrumbItem> _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Proyectos", href: $"/Projects/{employerEmail}"),
            new BreadcrumbItem(@projectName, href: $"/Projects/{employerEmail}/{projectName}"),
            new BreadcrumbItem("Contrataciones", href: null, disabled: true)
        }; 
        <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
        <MudPaper Height="60px" Width="100%" Outlined="false" Class="border-none" Elevation="0"> 
        </MudPaper>
        if (!_empty)
        {
                <MudTable @ref="@_table" Items="@_hiredableEmployees"  RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" Filter="new Func<Person,bool>(Filter)">
                    <ToolBarContent>
                            <MudText> Contratar empleados </MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="_mySearchString" Immediate="true" Placeholder="Buscar email" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent> 
                    <HeaderContent>
                        <MudTh>Nombre completo</MudTh>
                        <MudTh>Email</MudTh>                
                        <MudTh>Cedula</MudTh>
                        <MudTh>Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nombre completo">@context.Name @context.LastName1 @context.LastName2</MudTd>
                        <MudTd DataLabel="Email">@context.Email</MudTd>
                        <MudTd DataLabel="Cedula">@context.Ssn</MudTd>
                         <MudTd DataLabel="Acciones">
                        <MudSpacer></MudSpacer>
                            <MudButton Variant="Variant.Filled" @onclick="@(e => GoToContractEmployee(@context.Email, @context.Name, @context.LastName1, @context.LastName2))" Color="Color.Transparent">
                                <MudText>
                                Contratar
                                </MudText> 
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                <PagerContent>
                    <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
                </PagerContent>
                </MudTable>    
        } 
        else
        {
            <MudPaper  Height="320px" Width="100%" Outlined="true" Class="pa-32" Elevation="25">  
            <MudToolBar>
                <MudText> Contratar Empleados </MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_mySearchString" Placeholder="Buscar email" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </MudToolBar> 
                <MudPaper Height="60px" Width="100%" Outlined="false" Class="border-none" Elevation="0"> 
                </MudPaper>
                <br />
                <MudText Align="Align.Center" Typo="Typo.h5">No hay empleados registrados</MudText>
                <br />     
            </MudPaper>
        } 
        <br>
        <MudButton Variant="Variant.Filled" OnClick="GoToCreateEmployee" Color="Color.Primary">
            <MudText>
            Registrar Empleados
            </MudText> 
        </MudButton>
}
@code {
    [Parameter]
    public string employerEmail { get; set; }
    [Parameter]
    public string projectName { get; set; }
    private IEnumerable<Person> _hiredableEmployees = new List<Person>();
    private IEnumerable<Person> _hiredEmployees = new List<Person>();
    private MudTable<Person> _table;
    private bool _loading = true;
    private bool _empty = false;
    private string _mySearchString = "";

    protected override async Task OnInitializedAsync()
    {
        ContextMenuService.SetProjectsContext(true, true, projectName, employerEmail, false, ContextMenuService.GetReportsContext());
        _hiredableEmployees = await PersonService.GetAllEmployees(projectName);
        _hiredEmployees =  await PersonService.GetProjectEmployees(projectName, employerEmail);
        RemoveHiredEmployees();
        CheckElementLength();
        _loading = false;
    }

    private void RemoveHiredEmployees() 
    {
        _hiredableEmployees = (from myElement in _hiredableEmployees
                        select myElement)
                       .Except(_hiredEmployees).ToList();
    }

    private void CheckElementLength()
    {
        if (_hiredableEmployees.Length() == 0)
        {
            _empty = true;
        }
    }

    private void GoToCreateEmployee()
    {
        nav.NavigateTo($"/Create_Employee/{employerEmail}/{projectName}");
    }

    private void GoToContractEmployee(string employeeEmail, string name, string lastname1, string lastname2)
    {
        string employeeName = name + " " + lastname1 + " " + lastname2;
        nav.NavigateTo($"/Agreements/{employerEmail}/{projectName}/{employeeEmail}/{employeeName}/New");
    }

    private void PageChanged(int index)
    {
        _table.NavigateTo(index - 1);
    }

    private bool Filter(Person element) => FilterFunction(element, _mySearchString);

    private bool FilterFunction(Person element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}