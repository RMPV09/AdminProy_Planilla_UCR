@using Application.ContextMenu
@using Presentation.Core.Components

@inject IContextMenuService ContextMenuService

@{
    string _projectName = ContextMenuService.GetProjectsContext();
}

@if(!_isLoading)
{
    <li class="nav-item px-3">
        <NavLink class="nav-link" href=@($"/") Match="NavLinkMatch.All">
                <MudIconButton Icon="@Icons.Filled.Home" Color="@Color.Secondary" Class="mr-2"/>
            <span  aria-hidden="true"></span> <MudText>Inicio</MudText>
        </NavLink>
    </li>

    <li class="nav-item px-3">
        <NavLink class="nav-link" href=@($"Projects/{email}") Match="NavLinkMatch.All">
        <MudIconButton Icon="@Icons.Filled.BusinessCenter" Color="@Color.Secondary" Class="mr-2"/>
        <span  aria-hidden="true"></span> Proyectos
        </NavLink>
    </li>

    @if (ContextMenuService.GetReportsContext())
    {
        <ReportDropDown icon="@Icons.Material.Filled.ArrowDropUp"> </ReportDropDown>
    } else
    {
        <ReportDropDown icon="@Icons.Material.Filled.ArrowDropDown"> </ReportDropDown>
        <TabNavLink   Icon="@Icons.Filled.LibraryBooks" href="@($"/{email}/Payment_History")" text="Historial Pagos"></TabNavLink>
        <TabNavLink   Icon="@Icons.Filled.LibraryBooks" href="@($"/Last_Pay/{email}/default")" text="Último pago"></TabNavLink> 
    }


    @if (ContextMenuService.GetShowProjectsMenu())
    {
        @if (!ContextMenuService.GetShowProjectsSubMenu())
        {
            <ProjectsDropDown icon="@Icons.Material.Filled.ArrowDropUp"></ProjectsDropDown>
        } else
        {
            <ProjectsDropDown icon="@Icons.Material.Filled.ArrowDropDown"></ProjectsDropDown>
            <TabNavLink Icon="@Icons.Material.Filled.Assignment" href="@($"/Projects/{email}/{ContextMenuService.GetEmployerEmailContext()}/{_projectName}")" text="Detalles"></TabNavLink>
            @if (ContextMenuService.GetHoursEmployeeContext())
            {
                <TabNavLink  Icon="@Icons.Filled.MoreTime" href="@($"/ReportHours/{ContextMenuService.GetEmployerEmailContext()}/{email}")"  text="Reporte de horas"></TabNavLink>
                <TabNavLink  Icon="@Icons.Filled.Timer" href="@($"/Reported_Hours/{email}/")" text="Histórico de horas"></TabNavLink>
            }        
        
            <TabNavLink  Icon="@Icons.Material.Filled.CardGiftcard" href="@($"/Projects/{email}/{_projectName}/Benefits")" text="Beneficios"></TabNavLink>
            <TabNavLink  Icon="@Icons.Material.Filled.CardMembership" href="@($"/Projects/{email}/{_projectName}/Deductions")" text="Deducciones Voluntarias"></TabNavLink>
        }
    }
}

@code {
    [Parameter]
    public string email { get; set; }
    private bool _isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        ContextMenuService.SetOnChange(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _isLoading = false;
            InvokeAsync(StateHasChanged);
        }
        else
        {
        
        }
    }
}