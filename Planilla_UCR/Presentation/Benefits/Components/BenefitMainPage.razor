@using Domain.Subscriptions.Entities
@using Application.Subscriptions
@using Presentation.Core.Components
@using Presentation.Benefits.Components
@using Presentation.Authentication
@using System.Globalization
@using Application.ContextMenu
@inject NavigationManager nav
@inject ISubscriptionService SubscriptionService
@inject IContextMenuService ContextMenuService


@{List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Proyectos", href: $"/Projects/{employerEmail}"),
        new BreadcrumbItem($"{projectName}", href: $"/Projects/{employerEmail}/{projectName}"),
        new BreadcrumbItem("Beneficios", href: null, disabled: true),
    };
}

@if (_loading)
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
         </MudText>
    </MudPaper>
}
else
{
    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
        @if (_empty)
        {
            <MudText Typo="Typo.h6" Align="Align.Center">No hay beneficios asociados al proyecto
            </MudText>
            <br>    
            <MudToolBar DisableGutters="true" Class="gap-4">
                <MudButton></MudButton>
                <MudSpacer></MudSpacer>
                <MudButton Variant="Variant.Filled" OnClick="GoToCreate" Color="Color.Primary">
                    <MudText> 
                        Crear Beneficio
                    </MudText> 
                </MudButton>
                <MudSpacer></MudSpacer>
                <MudButton></MudButton>
            </MudToolBar>
        }
        else
        {
            <MudToolBar DisableGutters="true" Class="gap-4">
                <MudSpacer></MudSpacer>
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" OnClick="GoToConfigs"/>
            </MudToolBar>
            <MudTable @ref="_mudTable" Items="@_elements" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm"  Loading="@_empty" Filter="new Func<Subscription,bool>(FilterFunc1)">
                <ToolBarContent>
                    <MudText Align="Align.Center" Typo="Typo.h6">Lista de beneficios</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Nombre</MudTh>
                    <MudTh>Proveedor</MudTh>
                    <MudTh Style="text-align:right">Costo</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Nombre">
                        <MudLink Color="Color.Primary" Underline="Underline.Always" Href="@($"/Projects/{employerEmail}/{projectName}/Benefits/{context.SubscriptionName}")">
                            @context.SubscriptionName
                        </MudLink>
                    </MudTd>
                    <MudTd DataLabel="Descripción">@context.ProviderName</MudTd>
                    <MudTd DataLabel="Costo" Style="text-align:right"> @cultureCR.NumberFormat.CurrencySymbol @CostFormat(context.Cost)</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudPagination SelectedChanged="PageChanged" Count="@((_mudTable.GetFilteredItemsCount() + _mudTable.RowsPerPage - 1) / _mudTable.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
                </PagerContent>
            </MudTable>
            <br>    
            <MudButton Variant="Variant.Filled" OnClick="GoToCreate" Color="Color.Primary">Crear Beneficio</MudButton>
        }
}

@code {
    private bool _empty = true;
    private MudTable<Subscription> _mudTable;
    private IEnumerable<Subscription> _elements;
    private bool _loading = true;
    public string searchString1 = "";
    public CultureInfo cultureCR = CultureInfo.GetCultureInfo("es-CR");

    [Parameter] public string employerEmail { get; set; }
    [Parameter] public string projectName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ContextMenuService.SetProjectsContext(true,true, projectName, ContextMenuService.GetEmployerEmailContext(), ContextMenuService.GetHoursEmployeeContext(), ContextMenuService.GetReportsContext());
        _elements = await SubscriptionService.GetBenefitsByProject(employerEmail, projectName);
        _loading = false;
        if (_elements.Length() > 0)
        {
            _empty = false;   
        }
    }

    private void GoToCreate()
    {
        nav.NavigateTo($"/Projects/{employerEmail}/{projectName}/Benefits/New");
    }

    private void GoToConfigs()
    {
       nav.NavigateTo($"/Projects/{employerEmail}/{projectName}/Benefits/Configurations");
    }

    private void PageChanged(int i)
    {
        _mudTable.NavigateTo(i - 1);
    }

    private bool FilterFunc1(Subscription element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Subscription element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.SubscriptionName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    
    private string CostFormat(double cost)
    {
        string formatedCost = string.Format("{0:N}", cost);
        return formatedCost;
    }
}