@using Application.Subscriptions
@using Domain.Subscriptions.Entities
@using Domain.Subscribes.Entities
@using Application.Subscribes
@using Presentation.Benefits.Components
@using System.Globalization
@using Application.ContextMenu
@inject ISnackbar Snackbar
@inject NavigationManager nav
@inject ISubscriptionService SubscriptionService
@inject ISubscribeService SubscribeService
@inject IContextMenuService ContextMenuService

@if(_loading) {
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Secondary" Style="height:70px;width:70px;" Indeterminate="true" />
         </MudText>
    </MudPaper>
}else{
    @if (!_loading)
    {
        List<BreadcrumbItem> _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Proyectos", href: $"/Projects/{employeeEmail}"),
            new BreadcrumbItem(@projectName, href: $"/Projects/{employeeEmail}/{ContextMenuService.GetEmployerEmailContext()}/{projectName}"),
            new BreadcrumbItem("Beneficios",  href: null, disabled: true)
        }; 
        <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
        <MudPaper Height="60px" Width="100%" Outlined="false" Class="border-none" Elevation="0"> 
        </MudPaper>

        if(_empty)
        {
              <AvailableBenefitsError employeeEmail="@employeeEmail" projectName="@projectName" SendTableState="SendConmuteSignal"></AvailableBenefitsError>
        }else
        {
            <MudTable @ref="_mudTable" Items="@_elements" RowsPerPage="4" MultiSelection="true" @bind-SelectedItems="_selectedItems1" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info" Filter="new Func<Subscription,bool>(FilterFunc1)">
                <ToolBarContent>
                        <MudButton Color="Color.Tertiary"> Beneficios disponibles</MudButton>
                        <MudButton OnClick="SendConmuteSignal"> Mis beneficios </MudButton>
                        <MudSpacer />
                        <MudTextField @bind-Value="_searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent> 

                <HeaderContent>
                    <MudTh>Beneficio</MudTh>
                    <MudTh>Descripción</MudTh>
                    <MudTh Style="text-align:right">Monto</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Beneficio">@context.SubscriptionName</MudTd>
                    <MudTd DataLabel="Descripción" Style="width: 50%;">
                        <MudItem xs="8">
                            <MudTextField @bind-Value="context.SubscriptionDescription" Lines="2"  T="string" Variant="Variant.Text" ReadOnly = "true"></MudTextField>
                        </MudItem>
                    </MudTd>
                    <MudTd DataLabel="Monto" Style="text-align:right"> @cultureCR.NumberFormat.CurrencySymbol @CostFormat(context.Cost)</MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudPagination SelectedChanged="PageChanged" Count="@((_mudTable.GetFilteredItemsCount() + _mudTable.RowsPerPage - 1) / _mudTable.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
                </PagerContent>
            </MudTable>
                     <br>
                    <MudButton Variant="Variant.Filled" OnClick="Subscribe" Color="Color.Primary">
                        <MudText>
                            Suscribirse
                        </MudText> 
                    </MudButton>
        }
    }
}

@code {
    private bool _hidePosition;
    private bool _loading = true;
    private bool _empty = true;
    private string _searchString1 = "";
    private List<string> _descriptionVector = new List<string>();
    private IEnumerable<Subscription> _elements = new List<Subscription>();
    private HashSet<Subscription> _selectedItems1 = new HashSet<Subscription>();
    private MudTable<Subscription> _mudTable;
    private Subscribe subscribe = new Subscribe("", "", "", "", 0.0, DateTime.Now);
    public CultureInfo cultureCR = CultureInfo.GetCultureInfo("es-CR");

    [Parameter]
    public string projectName { get; set; }
    [Parameter]
    public string employeeEmail { get; set; }
    [Parameter]
    public EventCallback<string> SendTableState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ContextMenuService.SetProjectsContext(true,true, projectName, ContextMenuService.GetEmployerEmailContext(), ContextMenuService.GetHoursEmployeeContext(), ContextMenuService.GetReportsContext());
        _elements = await SubscriptionService.GetBenefitsByEmployee(employeeEmail, projectName);
        if (_elements.Length() > 0)
        {
            _empty = false;
            subscribe.EmployeeEmail = employeeEmail;
            subscribe.ProjectName = projectName;
        }
        _loading = false;
    }

    private void PageChanged(int i)
    {
        _mudTable.NavigateTo(i - 1);
    }

    private bool FilterFunc1(Subscription element) => FilterFunc(element, _searchString1);

    private bool FilterFunc(Subscription element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ProjectName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task SendConmuteSignal()
    {
        await SendTableState.InvokeAsync("");
    }

    private async Task Subscribe()
    {
        if (_selectedItems1.Length() > 0)
        {
            IEnumerable<Subscribe> _actualSubscriptions = await SubscribeService.GetBenefitsByEmployee(employeeEmail, projectName);
            foreach (Subscription subscription in _selectedItems1)
            {
                var _active = _actualSubscriptions.FirstOrDefault(e => e.EmployeeEmail == employeeEmail &&
                    e.EmployerEmail == subscription.EmployerEmail &&
                    e.SubscriptionName == subscription.SubscriptionName &&
                    e.EndDate == null);
                if (_active == null)
                {
                    subscribe.EmployerEmail = ContextMenuService.GetEmployerEmailContext();
                    subscribe.SubscriptionName = subscription.SubscriptionName;
                    subscribe.Cost = subscription.Cost;
                    int error = SubscribeService.CreateSubscribe(subscribe, 1);
                    if (error == 1)
                    {
                        Snackbar.Add("Suscripción realizada con éxito", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add("No se pudo suscribir al beneficio porque incumple los límites impuestos en el proyecto", Severity.Warning);
                    }
                }
                else
                {
                    Snackbar.Add("El beneficio ya está siendo usado", Severity.Warning);
                }
            }
            await SendConmuteSignal();
        }
        else
        {
            Snackbar.Add("Por favor seleccione los elementos a los que se desea suscribir", Severity.Warning);
        }

    }

    private string CostFormat(double cost)
    {
        string formatedCost = string.Format("{0:N}", cost);
        return formatedCost;
    }
}
