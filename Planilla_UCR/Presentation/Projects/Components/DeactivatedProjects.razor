@using Domain.Projects.Entities
@using Domain.Agreements.Entities
@using Domain.People.Entities
@using Domain.AgreementTypes.Entities
@using Application.Projects
@using Application.Agreements
@using Application.People
@using Application.Email
@using Application.AgreementTypes
@using Presentation.Core.Components
@using Presentation.Projects.Models
@using Application.ContextMenu
@using Presentation.Authentication

@inject NavigationManager nav
@inject ISnackbar Snackbar

@inject IPersonService PersonService
@inject IEmailServices EmailService
@inject IProjectService ProjectService
@inject IAgreementService AgreementService
@inject IAgreementTypeService AgreementTypeService
@inject IContextMenuService ContextMenuService

@{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Proyectos",  href: null, disabled: true),

    };
}

@if (_loading)
{
        <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudText Align="Align.Center" Typo="Typo.h6">
                <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
            </MudText>
    </MudPaper>
}
else
{
    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
    @if (_emptyProject)
    {
        <ProjectListError employeeEmail="@personEmail" projectName="@projectName" SendTableState="SendConmuteSignal" message="No hay proyectos desactivados"></ProjectListError>
    }
    else
    {
        <MudTable @ref="_mudTable" Items="@_projectElements" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm"  
        Loading="@_emptyProject" LoadingProgressColor="Color.Primary" Filter="new Func<Project,bool>(FilterFuncEmployer)">  

            <ToolBarContent>
                <MudButton OnClick="SendConmuteSignal"> Lista de proyectos</MudButton>
                <MudButton Color="Color.Tertiary"> Proyectos desactivados </MudButton>
                <MudSpacer></MudSpacer>
                <MudTextField @bind-Value="_searchString" Placeholder="Buscar proyecto" Adornment="Adornment.Start" 
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                </MudTextField>
            </ToolBarContent>

            <HeaderContent>
                <MudTh Style="text-align:justify-all">Nombre</MudTh>
                <MudTh Style="text-align:justify-all">Descripción</MudTh>
                <MudTh Style="text-align:justify-all"></MudTh>
            </HeaderContent>

            <RowTemplate Context="row">
                <MudTd DataLabel="Nombre" Style="text-align:justify-all">
                    <MudtText Color="Color.Primary">@row.ProjectName</MudtText>
                </MudTd>

                <MudTd DataLabel="Descripción" Style="text-align:justify-all">@row.ProjectDescription</MudTd>

                <MudTd Style="text-align:right">
                    <MudButton Variant="Variant.Filled" Color="Color.Transparent" OnClick="@(e => GoToActivate(@row.ProjectName))">Activar</MudButton>
                </MudTd>
            
            </RowTemplate>

            <PagerContent>
                    <MudPagination SelectedChanged="PageChangedR" 
                        Count="@((_mudTable.GetFilteredItemsCount() + _mudTable.RowsPerPage - 1) / _mudTable.RowsPerPage)" 
                        Color="Color.Primary" Class="pa-4"/>
            </PagerContent>
        </MudTable>
        <br>
        <MudDialog @bind-IsVisible="_visible" Options="dialogOptions" Style="text-align:justify-all">
            <TitleContent>
                <MudText Typo="Typo.h6" Style="text-align:justify-all" >
                    <MudIcon Icon="@Icons.Material.Filled.Warning" Color="@Color.Primary" Class="mr-2"/> 
                        Este proyecto no está activo ¿Desea volver a activar este proyecto?
                </MudText>
            </TitleContent>
            <DialogActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmActiveProject" Class="px-10">
                     Activar proyecto
                </MudButton>

                <MudButton Variant="Variant.Filled" Color="Color.Transparent" OnClick="CancelAction" Class="px-10">Cancelar</MudButton>
            </DialogActions>
        </MudDialog>
    }    
    
}

@code {
    private bool _visible;
    private bool _emptyProject = true;
    private bool _loading = true;
    private string _showMessage = "";
    private string _searchString = "";
    private string _actualProject = "";

    private IEnumerable<Person> _people;
    private IEnumerable<Project> _projectElements;
    private List<Person> _activeEmployees = new List<Person>();

    [Parameter] public string personEmail { get; set; }
    [Parameter] public string projectName { get; set; }
    [Parameter] public EventCallback<string> SendTableState { get; set; }


    private void OpenDialog() => _visible = true;
    private void CloseDialog() => _visible = false;
    private DialogOptions _dialogOptions = new() { FullWidth = true };
    private MudTable<Project> _mudTable;

    protected override async Task OnInitializedAsync()
    {
        _people = await PersonService.GetAllPeopleAsync();
        await LoadEmployer();

    }

    private async Task SendConmuteSignal()
    {
        await SendTableState.InvokeAsync("");
    }

    private async Task LoadEmployer()
    {
        _projectElements = await ProjectService.GetEmployerDeactivedProyects(personEmail);
        SelectDesactiveProjects();

        if (_projectElements.Length() > 0)
        {
            _emptyProject = false;
        }
        await InvokeAsync(StateHasChanged);
        _loading = false;
    }

    private void SelectDesactiveProjects()
    {
        List<Project> _desactiveProjectElements = new List<Project>();
        foreach (Project actualProject in _projectElements)
        {
            if (actualProject.IsEnabled == 0 && !((actualProject.ProjectName).Contains("BORRADO")))
            {
                _desactiveProjectElements.Add(actualProject);
            }
        }
        _projectElements = _desactiveProjectElements.AsEnumerable();
    }

    private async Task GoToActivate(string selectedProject)
    {
        _actualProject = selectedProject;
        OpenDialog();
    }

    private async Task ConfirmActiveProject()
    {
        await ActiveProject();
        CloseDialog();
    }

    private async Task ActiveProject() 
    {
        Project projectData = await ProjectService.GetDisabledProject(this.personEmail, _actualProject);
        ProjectService.UpdateProject(_actualProject, this.personEmail);
        projectData.IsEnabled = 1;
        await ProjectService.CreateProjectAsync(projectData);
        ShowSnackNotification(projectData.ProjectName + " activado exitosamente", Severity.Success);
        await Task.Delay(4000);
        nav.NavigateTo($"/Projects/{personEmail}/", true);
    }

    private void CancelAction() 
    {
        CloseDialog();
    }

    private bool FilterFuncEmployer(Project element) => FilterFuncR(element, _searchString);

    private bool FilterFuncR(Project element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ProjectName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    private void GoToDelete()
    {
        nav.NavigateTo($"/Projects/{personEmail}/{projectName}");
    }

    private void PageChangedR(int i)
    {
        _mudTable.NavigateTo(i - 1);
    }
}